// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Guardian {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now())

  // Relations
  children Child[]

  @@map("guardians")
}

model Child {
  id             Int      @id @default(autoincrement())
  guardianId     Int
  name           String   @db.VarChar(100)
  age            Int
  nativeLanguage String   @db.VarChar(50)
  createdAt      DateTime @default(now())

  // Relations
  guardian           Guardian            @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  assessmentSessions AssessmentSession[]
  plans              Plan[]

  @@map("children")
}

model AssessmentSession {
  id         Int                     @id @default(autoincrement())
  childId    Int
  status     AssessmentSessionStatus @default(ACTIVE)
  score      Int?
  startedAt  DateTime                @default(now())
  finishedAt DateTime?

  // Relations
  child   Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("assessment_sessions")
}

model Question {
  id        Int           @id @default(autoincrement())
  slug      String        @unique @db.VarChar(100)
  text      String        @db.Text
  ageMin    Int
  ageMax    Int
  scope     QuestionScope
  levelHint QuestionLevel
  createdAt DateTime      @default(now())

  // Relations
  options Option[]
  answers Answer[]

  @@map("questions")
}

model Option {
  id         Int     @id @default(autoincrement())
  questionId Int
  text       String  @db.VarChar(500)
  isCorrect  Boolean @default(false)

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  Answer[]

  @@map("options")
}

model Answer {
  id        Int      @id @default(autoincrement())
  sessionId Int
  questionId Int
  optionId  Int?
  freeText  String?  @db.Text
  correct   Boolean
  createdAt DateTime @default(now())

  // Relations
  session  AssessmentSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   Option?           @relation(fields: [optionId], references: [id], onDelete: SetNull)

  @@map("answers")
}

model Plan {
  id        Int      @id @default(autoincrement())
  childId   Int
  startsOn  DateTime
  endsOn    DateTime
  band      PlanBand
  createdAt DateTime @default(now())

  // Relations
  child    Child     @relation(fields: [childId], references: [id], onDelete: Cascade)
  planDays PlanDay[]

  @@map("plans")
}

model PlanDay {
  id              Int     @id @default(autoincrement())
  planId          Int
  dayIndex        Int
  vocabTask       Json
  readingTask     Json
  speakingTask    Json
  listeningTask   Json?
  minutesEstimate Int

  // Relations
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, dayIndex])
  @@map("plan_days")
}

// Enums
enum AssessmentSessionStatus {
  ACTIVE
  FINISHED
}

enum QuestionScope {
  vocab
  grammar
  reading
  listening
  speaking
}

enum QuestionLevel {
  A0
  A1
  A2
}

enum PlanBand {
  A0
  A1
  A2
}
